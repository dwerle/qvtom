{"name":"QVTom","tagline":"A Modular Extension for QVTo","body":"QVTom is a prototypical implementation of the module system for model transformation languages described in [1]. It replaces the default structure of a QVTo transformation with the definition of interfaces and interface implementations where implementations can be linked to interfaces with an export or import relationship.\r\n\r\nThe changes that have been made to the QVTo plugin [2] are described in this document.\r\n\r\n\r\n# Changes to the AST/CST\r\n\r\n## Changes to the meta models\r\nLegend:\r\nElement                      | Representation\r\n----------------------------------------------\r\nCST\t                         | **CST: ...**\r\nAST\t                         | **AST: ...**\r\nline number in QVTOParser.gi | **<n>**\r\n\r\n```\r\nmodeltype PCM uses 'http://sdq.ipd.uka.de/PalladioComponentModel/5.0';\r\nmodeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';\r\nmodeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';\r\n\r\ncompilation_environment \"Commons\";\r\n  **CST: CompilationEnvironmentCS[uriCS = \"Commons\"] <547>**\r\ncompilation_environment \"EventChannelMiddlewareRegistry\";\r\ncompilation_environment \"EventDistribution\";\r\ncompilation_environment \"EventFilter\";\r\n...\r\n\r\ninterface ISink( \r\n\tinout pcmAllocation : PCM_ALLOC,\r\n    **CST: InterfaceInOutParamCS[param = ParameterDeclarationCS[simpleNameCS = \"pcmAllocation\", typeSpecCS = PCM_ALLOC, directionKind = inout]]**\r\n    **AST: InterfaceRestrictionParameter[param = VarParameter[parsed by original parser]]**\r\n\tinout pcmSystem : PCM_SYS, \r\n\tinout pcmRepository : PCM_REP,\r\n\tin middlewareRepository : PCM_REP;\r\n\t\r\n\tin PCM_ALLOC[Allocation]\r\n\t  **CST: InterfaceRestrictionParamCS[param = PCM_ALLOC, classes = {Allocation::TypeSpecCS}, packages = {}] <780>**\r\n\t  **AST: InterfaceRestrictionParameter**\r\n)\r\n  **AST: InterfaceParamsCS[…] <680>**\r\n  **AST: ModuleHeaderCS[pathNameCS=\"ISink\", interfaceInOutParamsCS=..., interfaceRestrictionParamsCS=...] <581>**\r\n{\r\n\tmapping Sink_createSinkOperationProvidedRole(sinkComponent : pcm::repository::RepositoryComponent,\r\n\t                                             operationInterface : pcm::repository::OperationInterface) : pcm::repository::OperationProvidedRole;\r\n    **<830> - declarations: mapping_decl / helper_decl, Klassen: MappingRuleCS, MappingDeclarationCS (with setBlackbox(true));**\r\n}\r\n**AST: ModuleInterfaceCS[methods = ..., moduleHeader = ..., metamodels = ModelTypes aus Parametern]**\r\n**CST: ModuleInterface**\r\n\r\n \r\nmodule Sink mexport ISink\r\n  **AST: ModuleHeaderCS, ExportCS[pathNameCS = \"ISink\"] <581>**\r\n{\r\n\tmimport ISEFFRegistry;  \r\n\tmimport ISEFFUtil;\r\n\tmimport ICommons;\r\n\tmimport IOperationSignatureRegistry;\r\n\t\t\r\n\tmapping Sink_createSinkOperationProvidedRole(sinkComponent : pcm::repository::RepositoryComponent,\r\n\t                                             operationInterface : pcm::repository::OperationInterface) : pcm::repository::OperationProvidedRole {\r\n\t\t\tentityName := operationInterface.entityName+'OperationProvidedRole'+Commons_getUniqueElementNameSuffix();\r\n\t\t\tprovidingEntity_ProvidedRole := sinkComponent;\r\n\t\t\tprovidedInterface__OperationProvidedRole := operationInterface;\r\n\t}\r\n\t\r\n\t**<851> - implementations of mapping/helper methods: mapping_def / entry_def / helper_simple_def / helper_compund_def, Klassen: MappingMethodCS, MappingQueryCS, ModulePropertyCS**\r\n}\r\n```\r\n\r\n## Changes to the grammar QVTOParser.gi\r\n```\r\n%Globals\r\n\t/.\t\r\n\t[...]\r\n\timport org.eclipse.m2m.internal.qvt.oml.cst.ModuleHeaderCS;\r\n\timport org.eclipse.m2m.internal.qvt.oml.cst.MappingMethodCS;\r\n\timport org.eclipse.m2m.internal.qvt.oml.cst.InterfaceInOutParamCS;\r\n\timport org.eclipse.m2m.internal.qvt.oml.cst.InterfaceParamsCS;\r\n\timport org.eclipse.m2m.internal.qvt.oml.cst.InterfaceRestrictionParamCS;\r\n\t./\r\n%End\r\n\r\n%KeyWords\r\n\t[...]\r\n\tmodule\r\n\tinterface\r\n\tmimport\r\n\tmexport\r\n\tscope\r\n\tcompilation_environment\r\n%End\r\n\r\n\r\n%Rules\r\n\t[...]\r\n\tunit_element -> compilation_env\r\n\t\r\n\tcompilation_env ::= compilation_environment uri ';'\r\n\t\r\n\tunit_element -> module_def\r\n\tunit_element -> interface_def\r\n\t\r\n\tmodule_def ::= module_h mexport exportList '{' importList declarationList '}' semicolonOpt\r\n\tmodule_h ::= module qualifiedNameCS\r\n\r\n\texportList ::= qualifiedNameCS\r\n\texportList ::= exportList ',' qualifiedNameCS\r\n\t\r\n\tfullImport ::= mimport qualifiedNameCS ';'\r\n\timportList ::= %empty\r\n\timportList ::= importList fullImport\r\n\t\r\n\tinterface_def ::= interface_h '{' interfaceList '}' semicolonOpt\r\n\tinterface_h ::= interface qualifiedNameCS interfaceParams\r\n\r\n\tinterfaceParams ::= '(' interfaceInOutParamList ')'\r\n\tinterfaceParams ::= '(' interfaceInOutParamList ';' interfaceRestrictionList ')'\r\n\t\r\n\tinterfaceInOutParamList ::= interfaceInOutParamList ',' interfaceInOutParam\r\n\tinterfaceInOutParamList ::= interfaceInOutParam\r\n\r\n\tinterfaceRestrictionList ::= interfaceRestrictionList ',' interfaceRestrictionParam\r\n\tinterfaceRestrictionList ::= interfaceRestrictionParam\r\n\tinterfaceRestrictionParam ::= param_direction typespec '[' typespecList ']'\r\n\tinterfaceRestrictionParam ::= param_direction typespec '[' typespecList ']' '{' typespecList '}'\r\n\t\t\r\n\tparamWithDirection ::= param_direction IDENTIFIER ':' typespec\r\n\t\t\r\n\tinterfaceInOutParam ::= paramWithDirection\r\n\t\t\r\n\ttypespecList ::= %empty\r\n\ttypespecList ::= typespec\r\n\ttypespecList ::= typespecList ',' typespec\r\n\t\r\n\t-- returns a MappingRuleCS\r\n\tinterfaceElement -> mapping_decl\r\n\t-- returns a MappingQueryCS\r\n\tinterfaceElement -> helper_decl\r\n\t\r\n\tinterfaceList ::= interfaceList interfaceElement\r\n\tinterfaceList ::= interfaceElement\r\n\r\n\t-- return a MappingMethodCS\r\n\tdeclarationItem -> mapping_def\r\n\tdeclarationItem -> entry_def\r\n\t-- return a MappingQueryCS->MappingMethodCS\r\n\tdeclarationItem -> helper_simple_def\r\n\tdeclarationItem -> helper_compound_def\r\n\t\r\n\tdeclarationItem -> _property\r\n\r\n\tdeclarationList ::= declarationList declarationItem\r\n\tdeclarationList ::= declarationItem\r\n\t\r\n\t-- changed code ---\r\n\tscoped_identifier ::= scoped_identifier2\r\n\tscoped_identifier2 ::= IDENTIFIER '@' IDENTIFIER\r\n%End\r\n```\r\n\r\n## The new metamodels\r\n### AST\r\n<img src=\"http://qvt.github.io/qvtom/images/metamodelAST.png\" alt=\"AST metamodel\" />\r\n### CST\r\n<img src=\"http://qvt.github.io/qvtom/images/metamodelCST.png\" alt=\"CST metamodel\" />\r\n\r\n## How to include new elements into the CST/AST\r\n0. Once: adapt \"/org.eclipse.m2m.qvt.oml.cst.parser/cst/run-lpg.cmd\" (LPG_HOME, LPG_EXE, PERL_EXE)\r\n  * Warning: spaces in path names can lead to problems\r\n1. Augment CST and AST metamodels, generate Java code.\r\n  * /org.eclipse.m2m.qvt.oml.cst.parser/model/QVTOperationalCST.ecore\r\n  * /org.eclipse.m2m.qvt.oml/model/QVTOperational.ecore\r\n2. Add new keywords to \"/org.eclipse.m2m.qvt.oml.cst.parser/cst/QVTOKWLexer.gi\" (export **and** rule)\r\n3. In \"/org.eclipse.m2m.qvt.oml.cst.parser/cst/QVTOParser.gi\"\r\n  * Import keywords (%KeyWords)\r\n  *\tAdd rules with reference to factory method in org.eclipse.m2m.internal.qvt.oml.cst.parser.AbstractQVTParser\r\n  * If possible, call `setOffsets` appropriatelyIn der Regel wenn möglich auch setOffsets entsprechend aufrufen.\r\n4. Call \"/org.eclipse.m2m.qvt.oml.cst.parser/cst/run-lpg.cmd\"\r\n5. If top level elements have been created (such as ModuleImplementation/ModuleInterface/CompilationEnvironment), add them to `org.eclipse.m2m.internal.qvt.oml.cst.parser.AbstractQVTParser.setupTopLevel(EList<CSTNode>)`\r\n\r\n\r\n## Changes to the CST (/org.eclipse.m2m.qvt.oml.cst.parser/model/QVTOperationalCST.ecore)\r\n* Changes to UnitCS\r\n  * Reference to `ModuleImplementations` and `ModuleInterfaces`\r\n* New: ModuleHeaderCS\r\n* New: ModuleInterfaceCS\r\n* New: InterfaceInOutParamCS\r\n* New: InterfaceRestrictionParamCS\r\n* New: InterfaceParamsCS – eventuell entferenen\r\n* New: ModuleImplementationS\r\n* New: ExportCS\r\n* New: CompilationEnvironmentCS\r\n  * Only references the name of a part of the \"Compilation Environment\", i.e. all files that have to be compiled together.\r\n\r\n## Changes to the AST (/org.eclipse.m2m.qvt.oml/model/QVTOperational.ecore)\r\n* New: ModuleInterface\r\n  * Interface of a module, defines in/out/inout metamodels, visibility of the metamodel and method signatures\r\n* New: InterfaceInOutParameter\r\n  * Same as the in/out/inout parameters of a QVTo transformation but is defined for each ModuleInterface.\r\n* New: InterfaceRestrictionParameter\r\n  * Parameter to restrict the visibility of the metamodel\r\n* New: ModuleImplementation\r\n  * Implementation of a module, exports at least one interface and has to implement at least the methods of the exported interface(s).\r\n \t\r\n# Example for parsing and environments\r\n## Source code\r\n```\r\nmodeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';\r\nmodeltype UML uses 'http://www.eclipse.org/uml2/4.0.0/UML';\r\n\r\ninterface I_A(\r\n\tin ecore:ECORE,\r\n\tout uml:UML\r\n) {\r\n\tmapping EClass::EClass2Class() : Class;\r\n}\r\n\r\nmodule A mexport I_A {\r\n\tmapping EClass::EClass2Class() : Class {\r\n\t\tname := self.name;\r\n\t}\r\n}\r\n```\r\n\r\n## Partial dump of the resulting CompiledUnit\r\n```\r\nresult = CompiledUnit [\r\n  moduleEnvs = [\r\n    QvtOperationalFileEnv [\r\n      parent = null,\r\n      myFile = \".../minimal.qvto\",\r\n      myModuleImplementations = [\r\n        ModuleImplementation[\r\n          name = \"A\",\r\n          eOperations = [MappingOperation[name=\"EClass2Class\"]]\r\n        ]\r\n      ],\r\n      myModuleInterfaces = [\r\n        ModuleInterface[\r\n          name = \"I_A\",\r\n          operations = [MappingOperation[name=\"EClass2Class\"]]\r\n        ]\r\n      ]\r\n    ]\r\n  ]\r\n]\r\n```\r\n\r\n# See Also\r\n* [Modular Model Transformations](https://sdqweb.ipd.kit.edu/wiki/Modular_Model_Transformations), the overall approach behind this project, as well as information for developers.\r\n* [Xtend2m](http://qvt.github.io/xtend2m/), a modular extension of Xtend hosted at Github.\r\n\r\n# References\r\n* [1] A. Rentschler, D. Werle, Q. Noorshams, L. Happe, R. Reussner. [*Designing Information Hiding Modularity for Model Transformation Languages*](http://dl.acm.org/citation.cfm?doid=2577080.2577094). Proceedings of the 13th International Conference on Modularity (AOSD '14), Lugano, Switzerland, April 2014. ACM, New York, NY, USA. April 2014.\r\n* [2] [Eclipse Modeling - MMT - Project QVTo](http://www.eclipse.org/mmt/?project=qvto)\r\n\r\n# Contributors\r\n* [Dominik Werle](emailto:dominik.werle_AtSignGoesHere_student.kit.edu) from Karlsruhe Institute of Technology\r\n* [Andreas Rentschler] (http://sdq.ipd.kit.edu/people/andreas_rentschler/) from Karlsruhe Institute of Technology\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}